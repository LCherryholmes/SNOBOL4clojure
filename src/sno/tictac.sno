*   -------------------------------------------------------------------------
*   $Workfile: tictac.sno $ $Revision: 2 $ $Date: 3/10/05 11:56a $
*   -------------------------------------------------------------------------
*   This program plays a rudimentary game of TIC-TAC-TOE.
*
*   Although the strategy is not elaborate, it illustrates how pattern
*   matching can be used to analyse board positions.
*
*   The board is represented by a nine-character string.  Each string
*   position may contain an 'X' (player), 'O' (program), or '.' (vacant).
*
*   The correspondence between character position and the board is:
*
*           0 | 1 | 2
*           ---------
*           3 | 4 | 5
*           ---------
*           6 | 7 | 8
*
*
*   From STRING AND LIST PROCESSING IN SNOBOL4 by Ralph E. Griswold,
*                    by permission of the author.
*
*   -------------------------------------------------------------------------
*
*   Initialization
*
        &TRIM         =  1
        DEFINE('Col(c1,c2,c3)')
        DEFINE('Diag(c1,c2,c3)')
        DEFINE('Row(c1,c2,c3)')
        DEFINE('Two(m)')
        skip          =  null . OUTPUT
        row           =  LEN(3) . OUTPUT
        print         =  skip row row row skip
*   -------------------------------------------------------------------------
*
*   Board patterns
*
        c             =  TAB(0) | TAB(1) | TAB(2)                    ;* Columns start at character positions 0, 1, and 2:
        r             =  TAB(0) | TAB(3) | TAB(6)                    ;* Rows start at character positions 0, 3, and 6:
        f             =  @m '.'                                      ;* Assign scanner position to M, then see if the next square is free:
        p             =  POS(*m) '.'                                 ;* Pattern to take a vacant square at position M:
        center        =  TAB(4) f                                    ;* to determine if the center square is free.  Set M = 4 if so.
        corner        =  (TAB(0) | TAB(2) | TAB(6) | TAB(8)) f       ;* Pattern to see if any corner is free, set M = corner if so.
        win           =  Two('O')                                    ;* SNOBOL4 can win if there are two O's and a free square in a line:
        block         =  Two('X')                                    ;* SNOBOL4 must block user if two X's and a free square in a line:
        lose          =  Row('X', 'X', 'X')
+                     |  Col('X', 'X', 'X')
+                     |  Diag('X', 'X', 'X')                         ;* SNOBOL4 loses if row, column, or diagonal of 3 X's:
        play          =  block | corner | f                          ;* Block if necessary, else seize corner, else any take first free square:

*   -------------------------------------------------------------------------
*
*   Introduction
*
        OUTPUT        =  'This program plays TIC-TAC-TOE.  Your mark is X and you will play first.'
        OUTPUT        =  'The board is numbered as follows:'
        '012345678'   print
        OUTPUT        =  'When it is your turn to play, type the number of the square you wish to mark.'
        OUTPUT        =  'For example, if you type "4", the result is:'
        '....X....'   print
        OUTPUT        =  'Any time it is your turn to play, you may start a new game by typing "N"'
        OUTPUT        =  'or end the session by typing "Q"'
*   -------------------------------------------------------------------------
*
*   Game play
*
start   OUTPUT        =  DUPL('-', 10)
        OUTPUT        =  'NEW GAME'
        board         =  DUPL('.', 9)
next    OUTPUT        =  'Your play'
        m             =  REPLACE(INPUT, &LCASE, &UCASE)  :F(aband)
        IDENT(m, 'N')                                    :S(start)
        IDENT(m, 'Q')                                    :S(stop)
        INTEGER(m)                                       :F(error)
        board         p  = 'X'                           :F(error)   ;* Make move for user:
        board         center                             :S(mine)    ;* Try to seize the center:
        board         lose                               :S(lose)    ;* Check if we lost:
        board         win                                :S(win)     ;* Check if we won:
        board         play                               :F(tie)     ;* Neither.  Select our next move:
mine    board         p  = 'O'                                       ;* Make our move into position M.
        board         print                              :(next)
lose    OUTPUT        =  'You win'                       :(again)
tie     OUTPUT        =  'Tie game'                      :(again)
win     board         p  = 'O'
        OUTPUT        =  'I win'
again   board         print                              :(start)
aband   OUTPUT        =  'Session abandoned'             :(END)
stop    OUTPUT        =  'Session ended'                 :(END)
error   OUTPUT        =  'Erroneous move - try again'    :(next)
*   -------------------------------------------------------------------------
*
*   Function definitions
*
Col     Col           =  c c1 LEN(2) c2 LEN(2) c3        :(RETURN)   ;* Returns pattern to check for C1, C2, C3 adjacent in any column.
Diag    Diag          =  TAB(0) c1 TAB(4) c2 TAB(8) c3
+                     |  TAB(2) c1 TAB(4) c2 TAB(6) c3   :(RETURN)   ;* Returns pattern to check for C1, C2, C3 adjacent in any diagonal.
Row     Row           =  r c1 c2 c3                      :(RETURN)   ;* Returns pattern to check for C1, C2, C3 adjacent in any row.
Two     Two           =  Row(f, m, m)
+                     |  Row(m, f, m)
+                     |  Row(m, m, f)
+                     |  Col(f, m, m)
+                     |  Col(m, f, m)
+                     |  Col(m, m, f)
+                     |  Diag(f, m, m)
+                     |  Diag(m, f, m)
+                     |  Diag(m, m, f)                   :(RETURN)   ;* Returns pattern to check for two marks (M) and a vacant square:
END
