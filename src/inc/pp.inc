*---------------------------------------------------------------------------------------------------
                     DEFINE('ppSetStyle(style)')
                     DEFINE('pp(x)c,i,n,s,t,v')                                              :(pp_end)
ppSetStyle           ppStyle  =     style                                                    :(RETURN)
pp                   DIFFER(x)                                                               :F(RETURN)
                     t        =     t(x)
                     v        =     v(x)
                     n        =     n(x)
                     c        =     c(x)
*                    OUTPUT = 'pp(' t ')' ', sz = ' level '+' SIZE(v) ', v = ' v
                     DIFFER(t)                                                               :F(RETURN)
                                                                                             :S($('pp_' t))F(END)
*---------------------------------------------------------------------------------------------------
pp_identifier        Gen(qq(x))                                                              :S(RETURN)F(error)
pp_string            Gen(qq(x))                                                              :S(RETURN)F(error)
pp_epsilon           Gen(qq(x))                                                              :S(RETURN)F(error)
pp_&reduce           Gen(qq(x))                                                              :S(RETURN)F(error)
pp_&nPush            Gen(qq(x))                                                              :S(RETURN)F(error)
pp_&nInc             Gen(qq(x))                                                              :S(RETURN)F(error)
pp_&nDec             Gen(qq(x))                                                              :S(RETURN)F(error)
pp_&nPop             Gen(qq(x))                                                              :S(RETURN)F(error)
pp_Shift()           Gen(qq(x))                                                              :S(RETURN)F(error)
pp_Shift[]           Gen(qq(x))                                                              :S(RETURN)F(error)
pp_Reduce()          Gen(qq(x))                                                              :S(RETURN)F(error)
pp_Pop()             Gen(qq(x))                                                              :S(RETURN)F(error)
pp_#                 Gen(qq(x))                                                              :S(RETURN)F(error)
pp_integer           Gen(qq(x))                                                              :S(RETURN)F(error)
pp_+.                Gen(qq(x))                                                              :S(RETURN)F(error)
pp_-.                Gen(qq(x))                                                              :S(RETURN)F(error)
pp_.+.               Gen(qq(x))                                                              :S(RETURN)F(error)
pp_.-.               Gen(qq(x))                                                              :S(RETURN)F(error)
pp_.*.               Gen(qq(x))                                                              :S(RETURN)F(error)
pp_./.               Gen(qq(x))                                                              :S(RETURN)F(error)
pp_()                Gen(qq(x))                                                              :S(RETURN)F(error)
pp_productions       ppStyle  =     IDENT(ppStyle) 'sno'
                     ppWidth  =     IDENT(ppStyle, 'sno') 164
                     ppWidth  =     IDENT(ppStyle, 'ebnf') 72
                     ppWidth  =     IDENT(ppStyle, 'yy') 80
                     (IDENT(ppStyle, 'sno') GenSetCont('+'))                                 :(pp_0)
pp_re_production     (IDENT(v(c[1])) pp(c[2]))                                               :S(RETURN)
                     (IDENT(v(c[1]), 'TOKEN') pp(c[2]))                                      :(RETURN)
pp_re_spec                                                                                   :(pp_0)
*---------------------------------------------------------------------------------------------------
pp_re                ppMode   =     're'
                     (IDENT(t(c[2]), 'string') IDENT(v(c[2])))                               :S(RETURN)
                     v        =     v(c[1])
                     v        POS(0) '_' RTAB(0) = "$'" v "'"
                     SetLevel(0)
                     GenTab(12)
                     Gen(v)
                     GenTab(48)
                     SetLevel(48)
                     Gen('=')
                     IncLevel()
                     GenTab()
                     pp(c[2])
                     Gen(nl)
                     SetLevel(0)                                                             :(RETURN)
*---------------------------------------------------------------------------------------------------
pp_bnf_production    ppMode   =     'bnf'
                     v        =     v(c[1])
                     v        POS(0) '<' BREAK('>') . v '>' RPOS(0)                          :F(pp_bnf_production1)
                     v        =     REPLACE(v, ' -', '__')
pp_bnf_production1   SetLevel(0)
                     IDENT(ppStyle, 'sno')                                                   :F(pp_bnf_production3)
                     v        POS(0) '_' RTAB(0) = "$'" v "'"
                     (GenTab(12) Gen(v) GenTab(48))
                     (SetLevel(48) Gen('='))
                     (IncLevel() GenTab() pp(c[2]))
                     (Gen(' ') pp(c[3]))
                     Gen(nl)
                     SetLevel(0)                                                             :(RETURN)
pp_bnf_production3   IDENT(ppStyle, 'ebnf')                                                  :F(pp_bnf_production7)
                     ''       (*LT(n(c[2]), 3))                                              :F(pp_bnf_production5)
                     ''       (*LT(n(c[2]), 2) | *EQ(n(c(c[2])[2]), 0))                      :F(pp_bnf_production5)
                     ''       (*LT(n(c[2]), 1) | *EQ(n(c(c[2])[1]), 0))                      :F(pp_bnf_production5)
                     (Gen(v) Gen(' ::= ') pp(c[2]))
                     (Gen(semicolon nl nl))                                                  :(RETURN)
pp_bnf_production5   (Gen(v) Gen(' ::=' nl))
                     (IncLevel() GenTab() pp(c[2]) Gen(nl))
                     (DecLevel() Gen(semicolon nl nl))                                       :(RETURN)
pp_bnf_production7   IDENT(ppStyle, 'yy')                                                    :F(error)
                     ''       (*LT(n(c[2]), 3))                                              :F(pp_bnf_production9)
                     ''       (*LT(n(c[2]), 2) | *EQ(n(c(c[2])[2]), 0))                      :F(pp_bnf_production9)
                     ''       (*LT(n(c[2]), 1) | *EQ(n(c(c[2])[1]), 0))                      :F(pp_bnf_production9)
                     (Gen(v) Gen(' : ') pp(c[2]))
                     (Gen(semicolon nl nl))                                                  :(RETURN)
pp_bnf_production9   (Gen(v) Gen(' :' nl))
                     (IncLevel() GenTab() pp(c[2]) Gen(nl))
                     (DecLevel() Gen(semicolon nl nl))                                       :(RETURN)
*---------------------------------------------------------------------------------------------------
pp_|                 Gen(qq(x, ppWidth - GetLevel()))                                        :S(RETURN)
                     (EQ(n, 1) pp(c[1]))                                                     :S(RETURN)
                     pp(c[1])
                     i        =     1
pp_|0                i        =     LT(i, n) i + 1                                           :F($'pp_|1')
                     Gen(nl)
                     (DecLevel() Gen('|'))
                     (IncLevel() GenTab() pp(c[i]))                                          :($'pp_|0')
pp_|1                                                                                        :(RETURN)
*---------------------------------------------------------------------------------------------------
pp_&                 Gen(qq(x, ppWidth - GetLevel()))                                        :S(RETURN)
                     i        =     0
pp_&0                i        =     LT(i, n) i + 1                                           :F($'pp_&3')
                     (IDENT(t(c[i]), '|') GT(n(c[i]), 1))                                    :F($'pp_&1')
                     Gen('(' qq(c[i], ppWidth - GetLevel() - 2) ')')                         :S($'pp_&2')
                     Gen('(')
                     (IncLevel() GenTab() pp(c[i]) Gen(nl))
                     (DecLevel() Gen(')'))                                                   :($'pp_&2')
pp_&1                DIFFER(t(c[i]))                                                         :F($'pp_&0')
                     pp(c[i])                                                                :($'pp_&2')
pp_&2                (LT(i, n) Gen(nl))                                                      :($'pp_&0')
pp_&3                                                                                        :(RETURN)
*---------------------------------------------------------------------------------------------------
pp_?                 Gen(qq(x, ppWidth - GetLevel()))                                        :S(RETURN)
                     IDENT(ppStyle, 'sno')                                                   :F($'pp_?7')
                     EQ(ppOps, TRUE)                                                         :F($'pp_?5')
                     LE(n(c[1]), 1)                                                          :F($'pp_?3')
                     (Gen('!') pp(c[1]))                                                     :(RETURN)
pp_?3                Gen('!(')
                     (IncLevel() GenTab() pp(c[1]) Gen(nl))
                     (DecLevel() Gen(')'))                                                   :(RETURN)
pp_?5                Gen('(')
                     (IncLevel() GenTab() pp(c[1]) Gen(nl))
                     (DecLevel() Gen('|'))
                     s        =     EQ(doInstrument, FALSE) "epsilon"
                     s        =     EQ(doInstrument, TRUE)  "epsilon ~ ''"
                     (IncLevel() GenTab() Gen(s nl))
                     (DecLevel() Gen(')'))                                                   :(RETURN)
pp_?7                IDENT(ppStyle, 'ebnf')                                                  :F(error)
                     Gen('[')
                     (IncLevel() GenTab() pp(c[1]) Gen(nl))
                     (DecLevel() Gen(']'))                                                   :(RETURN)

*---------------------------------------------------------------------------------------------------
pp_,                 Gen(qq(x, ppWidth - GetLevel()))                                        :S(RETURN)
                     IDENT(ppStyle, 'sno')                                                   :F($'pp_,7')
                     LE(n(c[1]), 1)                                                          :F($'pp_,3')
                     (pp(c[1]) Gen(" % $','"))                                               :(RETURN)
pp_,3                Gen('(')
                     (IncLevel() GenTab() pp(c[1]) Gen(nl))
                     (DecLevel() Gen(") % $','"))                                            :(RETURN)
pp_,7                IDENT(ppStyle, 'ebnf')                                                  :F(error)
                     LE(n(c[1]), 1)                                                          :F($'pp_,9')
                     (pp(c[1]) Gen(" ,,,"))                                                  :(RETURN)
pp_,9                Gen('(')
                     (IncLevel() GenTab() pp(c[1]) Gen(nl))
                     (DecLevel() Gen(") ,,,"))                                               :(RETURN)
*---------------------------------------------------------------------------------------------------
pp_+                 (IDENT(ppMode, 're') IDENT(t(c[1]), '[]') Gen(qq(x)))                   :S(RETURN)
                     Gen(qq(x, ppWidth - GetLevel()))                                        :S(RETURN)
                     IDENT(ppStyle, 'sno')                                                   :F($'pp_+20')
                     EQ(ppOps, TRUE)                                                         :F($'pp_+5')
                     Gen('#(' qq(c[1], ppWidth - GetLevel() - 3) ')')                        :S(RETURN)
                     Gen('#(')
                     (IncLevel() GenTab() pp(c[1]) Gen(nl))
                     (DecLevel() Gen(')'))                                                   :(RETURN)
pp_+5                (IDENT(t(c[1]), '|') GT(n(c[1]), 1))                                    :F($'pp_+10')
                     Gen('(' qq(c[1], ppWidth - GetLevel() - 2) ')' nl)                      :S($'pp_+15')
                     Gen('(')
                     (IncLevel() GenTab() pp(c[1]) Gen(nl))
                     (DecLevel() Gen(')' nl))                                                :($'pp_+15')
pp_+10               Gen(qq(c[1], ppWidth - GetLevel()) nl)                                  :S($'pp_+15')
                     (pp(c[1]) Gen(nl))
pp_+15               t(x)     =     '*'                                                      :($'pp_*')
pp_+20               IDENT(ppStyle, 'ebnf')                                                  :F(error)
                     Gen('(')
                     (IncLevel() GenTab() pp(c[1]) Gen(nl))
                     (DecLevel() Gen(') ...'))                                               :(RETURN)
*---------------------------------------------------------------------------------------------------
pp_*                 (IDENT(ppMode, 're') IDENT(t(c[1]), '[]') Gen(qq(x)))                   :S(RETURN)
                     Gen(qq(x, ppWidth - GetLevel()))                                        :S(RETURN)
                     IDENT(ppStyle, 'sno')                                                   :F($'pp_*5')
                     (EQ(ppOps, TRUE) Gen('%(' nl))
                     (EQ(ppOps, FALSE) Gen('ARBNO(' nl))
                     (IncLevel() pp(c[1]) Gen(nl))
                     (DecLevel() Gen(')'))                                                   :(RETURN)
pp_*5                IDENT(ppStyle, 'ebnf')                                                  :F(error)
                     Gen('[')
                     (IncLevel() GenTab() pp(c[1]) Gen(nl))
                     (DecLevel() Gen('] ...'))                                               :(RETURN)
*---------------------------------------------------------------------------------------------------
pp_~[]
pp_[]                Gen(qq(x))                                                              :S(RETURN)F(error)
pp_-                                                                                         :(pp_0)
*---------------------------------------------------------------------------------------------------
pp_0                 i        =     0
pp_1                 i        =     LT(i, n) i + 1                                           :F(RETURN)
                     pp(c[i])                                                                :(pp_1)
pp_end
*===================================================================================================
                     DEFINE('qq(x,len)c,c1,c2,i,n,s,t,v')                                    :(qq_end)
qq                   len      =     IDENT(len) 1024
                     GT(len, 0)                                                              :F(FRETURN)
                     t        =     t(x)
                     v        =     v(x)
                     n        =     n(x)
                     c        =     c(x)
                     DIFFER(t)                                                               :S($('qq_' t))F(RETURN)
*---------------------------------------------------------------------------------------------------
qq_identifier        v        POS(0) '<' BREAK('>') . v '>' RPOS(0)                          :F(qq_identifier1)
                     v        =     REPLACE(v, ' -', '__')
qq_identifier1       IDENT(ppStyle, 'sno')                                                   :F(qq_identifier3)
                     qq       =     IDENT(v, 'EOF') "$' ' RPOS(0)"                           :S(qq_atomic)
                     v        POS(0) '_' RTAB(1) '_' = "$'" v "'"                            :S(qq_identifier2)
                     v        POS(0) '_' =                                                   :S(qq_identifier2)
                     qq       =     '*' v                                                    :(qq_atomic)
qq_identifier2       qq       =     v                                                        :(qq_atomic)
qq_identifier3       IDENT(ppStyle, 'ebnf')                                                  :F(qq_identifier4)
                     qq       =     IDENT(v, 'EOF') "EOF"                                    :S(qq_atomic)
                     v        POS(0) '_' RTAB(1) . v '_'                                     :S(qq_identifier2)
                     v        POS(0) '_' RTAB(0) . v = "'" v "'"                             :S(qq_identifier2)
                     v        POS(0) SPAN(&UCASE '_' '0123456789') RPOS(0)                   :F(qq_identifier2)
                     v        =     "'" v "'"                                                :(qq_identifier2)
qq_identifier4       IDENT(ppStyle, 'yy')                                                    :S(qq_identifier2)F(error)
qq_string            v        =     Intize(v)
                     qq       =     IDENT(ppMode, 're') Qize(v)                              :S(qq_atomic)
                     IsType(v, 'NULL,STRING')                                                :F(qq_badguy)
                     v        POS(0) SPAN(&LCASE '_' '0123456789') RPOS(0)                   :S(qq_string0)
                     v        POS(0) *ident RPOS(0)                                          :F(qq_string0)
                     qq       =     IDENT(ppStyle, 'sno') IDENT(v, 'GO') v ' FENCE'          :S(qq_atomic)
                     qq       =     IDENT(ppStyle, 'sno') v                                  :S(qq_atomic)
qq_string0           qq       =     IDENT(ppStyle, 'sno') '$' Qize(v)                        :S(qq_atomic)
                     qq       =     IDENT(ppStyle, 'ebnf') Qize(v)                           :S(qq_atomic)
                     qq       =     IDENT(ppStyle, 'yy') Qize(v)                             :S(qq_atomic)F(error)
qq_badguy            OUTPUT   =     'Bad datatype for value field! ' DATATYPE(v)             :(qq_atomic)
qq_epsilon           qq       =     'epsilon'                                                :(qq_atomic)
qq_atomic            LE(SIZE(qq), len)                                                       :S(RETURN)F(FRETURN)
*---------------------------------------------------------------------------------------------------
qq_&reduce           qq       =     IDENT(ppStyle, 'sno')  '("' v(c[1]) '" & ' v(c[2]) ')'               :S(qq_atomic)
                     qq       =     IDENT(ppStyle, 'ebnf') 'Reduce(' v(c[1]) ', ' v(c[2]) ')'            :S(qq_atomic)
                     qq       =     IDENT(ppStyle, 'yy')                                                 :S(qq_atomic)F(error)
qq_&nPush            qq       =     IDENT(ppStyle, 'sno')  'nPush()'                                     :S(qq_atomic)
                     qq       =     IDENT(ppStyle, 'ebnf') '<'                                           :S(qq_atomic)
                     qq       =     IDENT(ppStyle, 'yy')                                                 :S(qq_atomic)F(error)
qq_&nInc             qq       =     IDENT(ppStyle, 'sno')  'nInc()'                                      :S(qq_atomic)
                     qq       =     IDENT(ppStyle, 'ebnf') '++'                                          :S(qq_atomic)
                     qq       =     IDENT(ppStyle, 'yy')                                                 :S(qq_atomic)F(error)
qq_&nDec             qq       =     IDENT(ppStyle, 'sno')  'nDec()'                                      :S(qq_atomic)
                     qq       =     IDENT(ppStyle, 'ebnf') '--'                                          :S(qq_atomic)
                     qq       =     IDENT(ppStyle, 'yy')                                                 :S(qq_atomic)F(error)
qq_&nPop             qq       =     IDENT(ppStyle, 'sno')  'nPop()'                                      :S(qq_atomic)
                     qq       =     IDENT(ppStyle, 'ebnf') '>'                                           :S(qq_atomic)
                     qq       =     IDENT(ppStyle, 'yy')                                                 :S(qq_atomic)F(error)
qq_Shift()           qq       =     IDENT(ppStyle, 'sno')  EQ(n, 0) "epsilon ~ ''"                       :S(qq_atomic)
                     qq       =     IDENT(ppStyle, 'sno')  EQ(n, 1) "epsilon ~ '" v(c[1]) "'"            :S(qq_atomic)
                     qq       =     IDENT(ppStyle, 'sno')  EQ(n, 2) "(" qq(c[2]) ") ~ '" v(c[1]) "'"     :S(qq_atomic)
                     qq       =     IDENT(ppStyle, 'ebnf') EQ(n, 0) "Shift()"                            :S(qq_atomic)
                     qq       =     IDENT(ppStyle, 'ebnf') EQ(n, 1) "Shift(" v(c[1]) ")"                 :S(qq_atomic)
                     qq       =     IDENT(ppStyle, 'ebnf') EQ(n, 2) "Shift(" v(c[1]) ", " qq(c[2]) ")"   :S(qq_atomic)
                     qq       =     IDENT(ppStyle, 'yy')                                                 :S(qq_atomic)F(error)
qq_Shift[]           qq       =     IDENT(ppStyle, 'sno')  qq(c[2]) " ~ '" v(c[1]) "'"                   :S(qq_atomic)
                     qq       =     IDENT(ppStyle, 'ebnf') "Shift[" v(c[1]) ", " qq(c[2]) "]"            :S(qq_atomic)
                     qq       =     IDENT(ppStyle, 'yy')                                                 :S(qq_atomic)F(error)
qq_Reduce()          qq       =     IDENT(ppStyle, 'sno')  '("' "'" v(c[1]) "'" '" & ' "'" qq(c[2]) "')" :S(qq_atomic)
                     qq       =     IDENT(ppStyle, 'yy')                                                 :S(qq_atomic)
                     qq       =     IDENT(ppStyle, 'ebnf') "Reduce(" v(c[1]) ", " qq(c[2]) ")"           :S(qq_atomic)F(error)
qq_Pop()             qq       =     IDENT(ppStyle, 'sno')  'pop()'                                       :S(qq_atomic)
                     qq       =     IDENT(ppStyle, 'ebnf') 'Pop()'                                       :S(qq_atomic)
                     qq       =     IDENT(ppStyle, 'yy')                                                 :S(qq_atomic)F(error)
*---------------------------------------------------------------------------------------------------
qq_#                 qq       =     IDENT(ppStyle, 'sno')  'nTop()'                          :S(qq_atomic)
                     qq       =     IDENT(ppStyle, 'ebnf') '#'                               :S(qq_atomic)
                     qq       =     IDENT(ppStyle, 'yy')                                     :S(qq_atomic)F(error)
qq_integer           qq       =     v                                                        :(qq_atomic)
qq_+.                qq       =     '+' qq(c[1])                                             :S(RETURN)F(FRETURN)
qq_-.                qq       =     '-' qq(c[1])                                             :S(RETURN)F(FRETURN)
qq_.+.               qq       =     qq(c[1]) ' + ' qq(c[2])                                  :S(RETURN)F(FRETURN)
qq_.-.               qq       =     qq(c[1]) ' - ' qq(c[2])                                  :S(RETURN)F(FRETURN)
qq_.*.               qq       =     qq(c[1]) ' * ' qq(c[2])                                  :S(RETURN)F(FRETURN)
qq_./.               qq       =     qq(c[1]) ' / ' qq(c[2])                                  :S(RETURN)F(FRETURN)
qq_()                qq       =     '(' qq(c[1]) ')'                                         :S(RETURN)F(FRETURN)
*---------------------------------------------------------------------------------------------------
qq_|                 qq       =     qq(c[1], len)                                            :F(FRETURN)
                     i        =     1
qq_|0                i        =     LT(i, n) i + 1                                           :F(RETURN)
                     qq       =     qq ' | ' qq(c[i], len - SIZE(qq) - 3)                    :S($'qq_|0')F(FRETURN)
*---------------------------------------------------------------------------------------------------
qq_&                 i        =     0
qq_&0                i        =     LT(i, n) i + 1                                           :F(RETURN)
                     qq       =     DIFFER(qq) qq ' '
                     (IDENT(t(c[i]), '|') GT(n(c[i]), 1))                                    :F($'qq_&1')
                     qq       =     qq '(' qq(c[i], len - SIZE(qq) - 3) ')'                  :S($'qq_&0')F(FRETURN)
qq_&1                qq       =     qq qq(c[i], len - SIZE(qq) - 1)                          :S($'qq_&0')F(FRETURN)
*---------------------------------------------------------------------------------------------------
qq_?                 IDENT(ppStyle, 'sno')                                                   :F($'qq_?7')
                     EQ(ppOps, TRUE)                                                         :F($'qq_?5')
                     LE(n(c[1]), 1)                                                          :F($'qq_?3')
                     qq       =     '!' qq(c[1], len - 1)                                    :S(RETURN)F(FRETURN)
qq_?3                qq       =     '!(' qq(c[1], len - 3) ')'                               :S(RETURN)F(FRETURN)
qq_?5                s        =     EQ(doInstrument, FALSE) "epsilon"
                     s        =     EQ(doInstrument, TRUE)  "epsilon ~ ''"
                     qq       =     '(' qq(c[1], len - SIZE(s) - 5) " | " s ")"              :S(RETURN)F(FRETURN)
qq_?7                IDENT(ppStyle, 'ebnf')                                                  :F(error)
                     qq       =     '[' qq(c[1], len - 2) ']'                                :S(RETURN)F(FRETURN)
*---------------------------------------------------------------------------------------------------
qq_,                 IDENT(ppStyle, 'sno')                                                   :F($'qq_,5')
                     LE(n(c[1]), 1)                                                          :F($'qq_,3')
                     qq       =     qq(c[1], len - SIZE(qq) - 7) " % $','"                   :S(RETURN)F(FRETURN)
qq_,3                qq       =     '(' qq(c[1], len - SIZE(qq) - 9) ") % $','"              :S(RETURN)F(FRETURN)
qq_,5                IDENT(ppStyle, 'ebnf')                                                  :F(error)
                     LE(n(c[1]), 1)                                                          :F($'qq_,7')
                     qq       =     qq(c[1], len - SIZE(qq) - 4) " ,,,"                      :S(RETURN)F(FRETURN)
qq_,7                qq       =     '(' qq(c[1], len - SIZE(qq) - 6) ") ,,,"                 :S(RETURN)F(FRETURN)
*---------------------------------------------------------------------------------------------------
qq_+                 IDENT(ppMode, 're')                                                     :F($'qq_+5')
                     IDENT(t(c[1]), '[]')                                                    :F($'qq_+5')
                     n        =     n(c[1])
                     c        =     c(c[1])
                     i        =     0
qq_+0                i        =     LT(i, n) i + 1                                           :F($'qq_+1')
                     qq       =     qq qq(c[i])                                              :($'qq_+0')
qq_+1                qq       =     'SPAN(' Qize(qq) ')'                                     :(qq_atomic)
qq_+5                IDENT(ppStyle, 'sno')                                                   :F($'qq_+30')
                     EQ(ppOps, TRUE)                                                         :F($'qq_+10')
                     LE(n(c[1]), 1)                                                          :F($'qq_+7')
                     qq       =     '#' qq(c[1], len - 1)                                    :S(RETURN)F(FRETURN)
qq_+7                qq       =     '#(' qq(c[1], len - 3) ')'                               :S(RETURN)F(FRETURN)
qq_+10               (IDENT(t(c[1]), '|') GT(n(c[1]), 1))                                    :F($'qq_+15')
                     qq       =     '(' qq(c[1], len - 2) ')'                                :S($'qq_+20')F(FRETURN)
qq_+15               qq       =     qq(c[1], len)                                            :S($'qq_+20')F(FRETURN)
qq_+20               qq       =     qq ' ARBNO(' qq(c[1], len - SIZE(qq) - 8) ')'            :S(RETURN)F(FRETURN)
qq_+30               IDENT(ppStyle, 'ebnf')                                                  :F(error)
                     LE(n(c[1]), 1)                                                          :F($'qq_+37')
                     qq       =     qq(c[1], len - 4) ' ...'                                 :S(RETURN)F(FRETURN)
qq_+37               qq       =     '(' qq(c[1], len - 6) ') ...'                            :S(RETURN)F(FRETURN)
*---------------------------------------------------------------------------------------------------
qq_*                 IDENT(ppMode, 're')                                                     :F($'qq_*5')
                     IDENT(t(c[1]), '[]')                                                    :F($'qq_*5')
                     n        =     n(c[1])
                     c        =     c(c[1])
                     i        =     0
qq_*0                i        =     LT(i, n) i + 1                                           :F($'qq_*1')
                     qq       =     qq qq(c[i])                                              :($'qq_*0')
qq_*1                qq       =     '(SPAN(' Qize(qq) ') | epsilon)'                         :(qq_atomic)
qq_*5                IDENT(ppStyle, 'sno')                                                   :F($'qq_*20')
                     EQ(ppOps, TRUE)                                                         :F($'qq_*10')
                     LE(n(c[1]), 1)                                                          :F($'qq_*7')
                     qq       =     '%' qq(c[1], len - SIZE(qq) - 1)                         :S(RETURN)F(FRETURN)
qq_*7                qq       =     '%(' qq(c[1], len - SIZE(qq) - 3) ')'                    :S(RETURN)F(FRETURN)
qq_*10               qq       =     'ARBNO(' qq(c[1], len - SIZE(qq) - 7) ')'                :S(RETURN)F(FRETURN)
qq_*20               IDENT(ppStyle, 'ebnf')                                                  :F(error)
                     qq       =     '[' qq(c[1], len - SIZE(qq) - 6) '] ...'                 :S(RETURN)F(FRETURN)
*---------------------------------------------------------------------------------------------------
qq_~[]               s        =     'NOT'
qq_[]                i        =     0
qq_[]0               i        =     LT(i, n) i + 1                                           :F($'qq_[]1')
                     qq       =     qq qq(c[i])                                              :($'qq_[]0')
qq_[]1               qq       =     s 'ANY(' Qize(qq) ')'                                    :(qq_atomic)
*---------------------------------------------------------------------------------------------------
qq_-                 c1       =     Intize(v(c[1]))
                     c1       POS(0) '\u'                                                    :S(FRETURN)
qq_-0                qq       =     EQ(n, 1) c1                                              :S(RETURN)
                     c2       =     Intize(v(c[2]))
                     c2       POS(0) '\u'                                                    :S(FRETURN)
                     &ALPHABET  (c1 BREAK(c2) c2) . qq                                       :S(RETURN)F(error)
*---------------------------------------------------------------------------------------------------
qq0                  qq       =     '(' t
                     i        =     0
qq1                  i        =     LT(i, n) i + 1                                           :F(qq2)
                     qq       =     qq ' ' qq(c[i], len - SIZE(qq) - 2)                      :S(qq1)F(FRETURN)
qq2                  qq       =     qq ')'                                                   :(RETURN)
qq_end
