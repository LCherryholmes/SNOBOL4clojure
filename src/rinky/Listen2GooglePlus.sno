*-------------------------------------------------------------------------------------------------------
* Listen2GooglePlus.sno
*---------- Polling ... -------------------------------------------------------
*---------- FOR all topics ... ------------------------------------------------
*---------- FOR every page ... ------------------------------------------------
*-------------------------------------------------------------------------------------------------------
-INCLUDE '5ivesAlive.inc'
-INCLUDE 'JSON.inc'
-INCLUDE 'MoreInput.inc'
*========== =========== === ======================================================= ====================
            xListener   =   'Listen2GooglePlus'
            userAgent   =   '5ivesAlive/1.0 (compatible; MSIE 6.0; Windows NT 5.1; .NET CLR 1.1.4322)'
            cookies     =   xListener 'Cookies.txt'
            doParseTree =   FALSE
            urlReferer  =   'LonCherryholmes.BlogSpot.com'
            gpUrl       =   'https://www.googleapis.com/plus/v1/activities'
            gpResults   =   20
            gpApiKey    =   'AIzaSyAlKb_QRZN3zEoF4SE8dGNCaZn6w6BuqPU' ;* GooglePlus
*---------- ----------- --- ----------------------------------------------------------------------------
            gpExpr      =  *(   'query'      '=' URLEncode(gpxQuery)
+                           '&' 'orderBy'    '=' 'recent'
+                           '&' 'maxResults' '=' gpResults
+                          ('&' 'pageToken'  '=' gpPageToken DIFFER(gpPageToken), NULL)
+                           '&' 'key'        '=' gpApiKey
+                           )
*---------- ----------- --- ------------------------------------------------------- --------------------
            gpQuery     =   POS(0) $ xQT . *assign(.iQT, 0) . *assign(.xQT, TABLE()) *gpAlts RPOS(0)
            gpAlts      =   *gpAlt ARBNO(*gpOR *gpAlts)
            gpOR        =   $'  ' 'OR' $'  '
            gpAlt       =   ('"' BREAK('"') '"') . gpxAlt . *assign(.iQT, iQT + 1) . *assign(.xQT[iQT], gpxAlt)
*---------- ----------- --- ------------------------------------------------------- --------------------
            EXIT(3, xListener '.exe')
-INCLUDE    'env.inc'
-INCLUDE    'curl.inc'
-INCLUDE    'sqlncli.inc'
            sDirPath = GetCurrentDirectory()
            hProcess = GetCurrentProcess()
            hModule = GetModuleHandle()
            sExePath = GetModuleFileName(hModule)
            OUTPUT      =   'Current Directory Path: ' sDirPath
            OUTPUT      =   'Current Process: ' hProcess
            OUTPUT      =   'Current Module: ' hModule
            OUTPUT      =   'Executable Path: ' sExePath
            Args(xListener)                                                         :F(END)
            &STLIMIT    =   EQ(xDebug, FALSE) -1                                    :F(debuggo)
*========== =========== === ======================================================= ====================
START       SetupWait()                                                             :F(LEnd)
            SetupCancel()                                                           :F(LEnd)
L05         SQL_Connect(xServer, xDatabase, xUser, xPassword, xListener, xFailOver) :F(SQLFail)
            SQL_SetAutoCommitOff()                                                  :F(SQLFail)
            hstmt       =   SQL_AllocStmt()                                         :F(SQLFail)
            xCwd        =   GetCurrentDirectory()
            curl        =   curl_easy_init()                                        :F(LErr)
*           EQ(cc = curl_easy_setopt(curl, CURLOPT_VERBOSE, TRUE))                  :F(LErr)
            EQ(cc = curl_easy_setopt(curl, CURLOPT_SSL_VERIFYPEER, FALSE))          :F(LErr)
            EQ(cc = curl_easy_setopt(curl, CURLOPT_USERAGENT, userAgent))           :F(LErr)
            EQ(cc = curl_easy_setopt(curl, CURLOPT_REFERER, urlReferer))            :F(LErr)
            EQ(cc = curl_easy_setopt(curl, CURLOPT_COOKIEFILE, cookies))            :F(LErr)
            EQ(cc = curl_easy_setopt(curl, CURLOPT_COOKIEJAR, cookies))             :F(LErr)
            periodSecs  =   IDENT(periodSecs) 90
            oneMin      =   1 * 60 * 1000
            backSecs    =   4 * 60 * 60  ;*hours(s) in seconds
            backSecs    =   7 * 24 * 60 * 60  ;*day(s) in seconds
            prevTime    =   DTDecode(Datetime())
            backTime    =   DTSubtract(DTDecode(Datetime()), backSecs)
            backTime    =   DTEncode(backTime)
*           backTime    =   '2011-11-10 00:00:00'
            timeZone    =   -4 * 60 * 60  ;* North Carolina, GMT-4 hours in seconds
            timeZone    =   +2 * 60 * 60  ;* Israel, GMT+2 hours in seconds
            gpCntT      =   TABLE()
            gpModT      =   TABLE()
            ReadSchema('GooglePlus')                                                :F(error)
            ReadConfig(xListener)                                                   :F(error)
*---------- Polling ... -----------------------------------------------------------
            iPoll       =   xIT[0]['Poll']
L10         iPoll       =   EQ(IsCancelled(), FALSE) iPoll + 1                      :F(LEnd)
            gpTotT      =   TABLE()
            ReadConfig(xListener)                                                   :F(error)
*---------- FOR all topics ... ----------------------------------------------------
            iT          =   xIT[0]['Topic']
L20         iT          =   EQ(IsCancelled(), FALSE) LT(iT, xMaxEntity) iT + 1      :F(L90)
            xT          =   DIFFER(xIT[iT]) xIT[iT]                                 :F(L20)
            iTopic      =   iT
            xE          =   xT['Name']
            xQ          =   xT['Query']
            xQ          ?   *gpQuery                                                :F(error)
            gpCntT[iT]  =   GT(gpCntT[iT], 1) gpCntT[iT] - 1                        :S(L20)
            (EQ(xReset, TRUE) EQ(iPoll, 1))                                         :F(L25)
            xT['Since'] =
            xT['Until'] =
            xT['Max']   =
            xT['Alt']   =
L25         nowDT       =   DTDecode(Datetime())
            thenDT      =   DTDecode(backTime)
            xT['Until'] =   IDENT(xT['Until']) DTEncode(nowDT)
            xT['Since'] =   IDENT(xT['Since']) DTEncode(thenDT)
            xT['Max']   =   IDENT(xT['Max']) xT['Until']
            gpxMinBatch =
            gpxMaxBatch =
            gpPageToken =
*---------- FOR every search alternative ... --------------------------------------
            iAlt        =   xT['Alt']
L30         iAlt        =   iAlt + 1
            gpxQuery    =   DIFFER(xQT[iAlt]) xQT[iAlt]                             :F(L80)
*---------- FOR every page ... ----------------------------------------------------
            gpxHasMore  =   TRUE
            iPage       =   0
L40         iPage       =   EQ(gpxHasMore, TRUE) iPage + 1                          :F(L70)
*           Get result ...
            gpxExpr     =   EVAL(gpExpr)
            url         =   gpUrl '?' gpxExpr
L43         iTry        =   0
L44         iTry        =   LT(iTry, 10) iTry + 1                                   :F(LErr)
            EQ(IsCancelled(), FALSE)                                                :F(L90)
            Wait(GT(iTry, 1) oneMin)
            currTime    =   DTDecode(Datetime())
            iSecs       =   DTDiff(currTime, prevTime)
            iWaitSecs   =   periodSecs - iSecs
            OUTPUT      =   GE(xVerbose, 3) LT(iWaitSecs) 'Slipped ' -iWaitSecs ' seconds.'
            Wait(GT(iWaitSecs) iWaitSecs * 1000)
            prevTime    =   DTDecode(Datetime())
            OUTPUT      =   GE(xVerbose, 5) DTEncode(prevTime) ' GET ...?' gpxExpr
            EQ(cc = curl_easy_setopt(curl, CURLOPT_HTTPGET, TRUE))                  :F(LErr)
            EQ(cc = curl_easy_setopt_int(curl, CURLOPT_TIMEOUT, 120))               :F(LErr)
            EQ(cc = curl_easy_setopt(curl, CURLOPT_URL, url))                       :F(LErr)
            EQ(cc = curl_easy_perform(curl))                                        :F(L44)
            json        =   curl_easy_getdata()
            json        ?   POS(0) '<!DOCTYPE ' ('HTML' | 'html')                   :S(L40E)
            LineMap(json, .t8Map)
            json        ?   *jpPretty = jpxP                                        :F(L40X)
*           Process result ...
L45         Write(xListener '.json', json)
*           Write(xListener '-' (iWritten = iWritten + 1) '.json', json)
            LineMap(json, .t8Map)
            json        ?   *jRecognizer                                            :S(L40S)F(L40F)
L40S        iIter       =   iIter + 1
            r           =   Pop()
            tK          =   TABLE()
            tK[0]       =   1
            tK[1]       =   'GooglePlus'
            tK['$GooglePlus'] = '@id$'
            BATCH       =
            Schema(.BATCH, r, 'GooglePlus')
            DIFFER(BATCH)                                                           :F(L40S1)
            SQL_A_ExecDirect(hstmt, BATCH)                                          :F(SQLFail)
            SQL_EndTranCommit()                                                     :F(SQLFail)
L40S1       BATCH       =
            BATCH       =   BATCH 'DECLARE @id$ int' nl
            Save(.BATCH, r, 'GooglePlus', 0)
            hBatch      =   SQL_AllocStmt()                                         :F(SQLFail)
            SQL_W_ExecDirect(hBatch, utf8_to_wstr(BATCH))                           :F(SQLFail)
            SQL_EndTranCommit()                                                     :F(SQLFail)
            SQL_FreeStmt(hBatch)                                                    :F(SQLFail)
            iCount      =   0
            gpxC        =   0
            gpxMinDate  =
            gpxMaxDate  =
Yipper      gpxSpace    =   DUPL(' ', 8192)
            gpxSpace    ?      FENCE
+                             *IDENT(t(r), 'JSON')
+                           *IDENT(t(c(r)[1]), '{}')
+                              *GE(n(c(r)[1]), i = 1)
+                        ARBNO(*GE(n(c(r)[1]), i = i + 1) ' ')
+                         *IDENT(t(c(c(r)[1])[i]), ':')
+                       *IDENT(t(c(c(c(r)[1])[i])[1]), 'Name')
+                       *IDENT(v(c(c(c(r)[1])[i])[1]), 'items')
+                       *IDENT(t(c(c(c(r)[1])[i])[2]), '[]')
+                          *GE(n(c(c(c(r)[1])[i])[2]), j = 1)
+                    ARBNO(*GE(n(c(c(c(r)[1])[i])[2]), j = j + 1) ' ')
+                     *IDENT(t(c(c(c(c(r)[1])[i])[2])[j]), '{}')
+                        *GE(n(c(c(c(c(r)[1])[i])[2])[j]), k = 1)
+                  ARBNO(*GE(n(c(c(c(c(r)[1])[i])[2])[j]), k = k + 1) ' ')
+                   *IDENT(t(c(c(c(c(c(r)[1])[i])[2])[j])[k]), ':')
+                 *IDENT(t(c(c(c(c(c(c(r)[1])[i])[2])[j])[k])[1]), 'Name')
+                 *IDENT(v(c(c(c(c(c(c(r)[1])[i])[2])[j])[k])[1]), 'published')
+                 *IDENT(t(c(c(c(c(c(c(r)[1])[i])[2])[j])[k])[2]), 'Datetime')
+           *?(gpxDate = v(c(c(c(c(c(c(r)[1])[i])[2])[j])[k])[2]))
+           *?(gpxMinDate = MinDate(gpxDate, gpxMinDate))
+           *?(gpxMaxDate = MaxDate(gpxDate, gpxMaxDate))
+           *?(gpxC = gpxC + 1)
+           *?(iCount = iCount + 1)
+           FAIL
*           TERMINAL = gpxMinDate ' ' gpxMaxDate ' ' gpxC ' ' iCount
            gpPageToken =
            gpxSpace    ?     FENCE
+                            *IDENT(t(r), 'JSON')
+                          *IDENT(t(c(r)[1]), '{}')
+                             *GE(n(c(r)[1]), i = 1)
+                       ARBNO(*GE(n(c(r)[1]), i = i + 1) ' ')
+                        *IDENT(t(c(c(r)[1])[i]), ':')
+                      *IDENT(t(c(c(c(r)[1])[i])[1]), 'Name')
+                      *IDENT(v(c(c(c(r)[1])[i])[1]), 'nextPageToken')
+                      *IDENT(t(c(c(c(r)[1])[i])[2]), 'String')
+            *?(gpPageToken = v(c(c(c(r)[1])[i])[2]))
            OUTPUT      =   GE(xVerbose, 4) iT ',' iAlt ',' gpxMinDate ',' gpxMaxDate
+                           ',' iPage ',' iCount
            gpTotT[iT]  =   gpTotT[iT] + iCount
            gpxMinBatch =   MinDate(gpxMinDate, gpxMinBatch)
            gpxMaxBatch =   MaxDate(gpxMaxDate, gpxMaxBatch)
            xT['Until'] =   DIFFER(gpxMinDate) gpxMinDate
            xT['Max']   =   DIFFER(gpxMaxDate) IDENT(xT['Max']) gpxMaxDate
            gpxHasMore  =   EQ(gpxC) FALSE                                          :S(L40)
            gpxHasMore  =   LLE(gpxMinBatch, xT['Since']) FALSE                     :(L40)
L40F        TERMINAL    =   'failure'                                               :(END)
L40X        TERMINAL    =   'terminal failure'                                      :(END)
L40E        TERMINAL    =   'HTML RESPONSE !!!'
            TERMINAL    =   json                                                    :(L40)
*---------- END FOR every page ----------------------------------------------------
L70         OUTPUT      =   GE(xVerbose, 3) iT ',' iAlt ','
+                           gpxMinBatch ',' gpxMaxBatch ','
+                           gpTotT[iT] ',' gpxQuery
            xT['Until'] =   xT['Max']
            xT['Alt']   =   iAlt
            IniWrite(xListener '.ini', xIT)                                         :(L30)
*---------- END every search alternative ... --------------------------------------
L80         OUTPUT      =   GE(xVerbose, 2) iT ',' gpTotT[iT] ',"' xE '"'
            gpModT[iT]  =   EQ(gpTotT[iT]) LT(gpModT[iT], 5) gpModT[iT] + 1
            gpModT[iT]  =   GT(gpTotT[iT]) GT(gpModT[iT], 1) gpModT[iT] - 1
            gpCntT[iT]  =   gpModT[iT]
            xT['Since'] =   xT['Max']
            xT['Until'] =
            xT['Max']   =
            xT['Alt']   =
            xIT[0]['Topic'] = iT
            IniWrite(xListener '.ini', xIT)                                         :(L20)
*---------- END FOR every entity --------------------------------------------------
L90         xIT[0]['Topic'] = 0
            xIT[0]['Poll'] = iPoll
            IniWrite(xListener '.ini', xIT)
            gpReport    =
            iTotal      =   0
            iT          =   0
L93         iT          =   LT(iT, xMaxEntity) iT + 1                               :F(L95)
            DIFFER(xT = xIT[iT])                                                    :F(L93)
            iTotal      =   iTotal + gpTotT[iT]
            gpReport    =   gpReport ',' LPAD(gpTotT[iT], 3)                        :(L93)
L95         OUTPUT      =   GE(xVerbose, 1) Datetime()
+                           ',' LPAD(iPoll, 4) ',' LPAD(iTotal, 4) gpReport         :(L10)
*---------- ----------- --- -------------------------------------------------------
SQLFail     OUTPUT      =   'SQL Failure: ' SQL_GetLastError()
            IniWrite(xListener '.ini', xIT)
            iSQLFail    =   LT(iSQLFail, 10) iSQLFail + 1                           :F(LEnd)
            (SQL_FreeStmt(hstmt), OUTPUT = 'FreeStmt: ' SQL_GetLastError())
            (SQL_Disconnect(), OUTPUT = 'Disconnect: ' SQL_GetLastError())
            curl_easy_cleanup(curl)
            Wait(oneMin)                                                            :(L05)
*---------- ----------- --- -------------------------------------------------------
LErr1       OUTPUT      =   'Failure (' iT ', ' iPage ', ' gpxC ').'
            OUTPUT      =   gpxChunk                                                :(LEnd)
LErr2       OUTPUT      =   'Weird error.'                                          :(LEnd)
LErr        curl_easy_error_info(curl, cc)                                          :(LEnd)
*---------- ----------- --- -------------------------------------------------------
LEnd        IniWrite(xListener '.ini', xIT)
            PumpFini()
            (SQL_FreeStmt(hstmt), OUTPUT = 'FreeStmt: ' SQL_GetLastError())
            (SQL_Disconnect(), OUTPUT = 'Disconnect: ' SQL_GetLastError())
            curl_easy_cleanup(curl)                                                 :(END)
*========== =========== === =======================================================
*-INCLUDE 'debug.sno'
END
