*-------------------------------------------------------------------------------------------------------
* Listen2Yelp.sno
*---------- Polling ... -------------------------------------------------------
*---------- FOR all topics ... ------------------------------------------------
*---------- FOR every search alternative ... ----------------------------------
*---------- FOR every city ... ------------------------------------------------
*-------------------------------------------------------------------------------------------------------
-INCLUDE '5ivesAlive.inc'
-INCLUDE 'JSON.inc'
-INCLUDE 'MoreInput.inc'
*========== =========== === ======================================================= ====================
            xListener   =   'Listen2Yelp'
            userAgent   =   '5ivesAlive/1.0 (compatible; MSIE 6.0; Windows NT 5.1; .NET CLR 1.1.4322)'
            cookies     =   xListener 'Cookies.txt'
            doParseTree =   FALSE
            urlReferer  =   'LonCherryholmes.BlogSpot.com'
            ypUrl       =   'http://api.yelp.com/business_review_search'
            ypLimit     =   20
            ywsID       =   '8wfyjLujWq3uP8knI-JyTQ' ;* Yelp
*---------- ----------- --- ------------------------------------------------------------------------
            ypExpr      =  *(   'limit'    '=' ypLimit
+                           '&' 'ywsid'    '=' ywsID
+                           '&' 'location' '=' URLEncode(xWhere)
+                           '&' 'term'     '=' URLEncode(qxQuery)
+                           )
*---------- ----------- --- ------------------------------------------------------- --------------------
            EXIT(3, xListener '.exe')
-INCLUDE    'env.inc'
-INCLUDE    'curl.inc'
-INCLUDE    'sqlncli.inc'
            sDirPath = GetCurrentDirectory()
            hProcess = GetCurrentProcess()
            hModule = GetModuleHandle()
            sExePath = GetModuleFileName(hModule)
            OUTPUT      =   'Current Directory Path: ' sDirPath
            OUTPUT      =   'Current Process: ' hProcess
            OUTPUT      =   'Current Module: ' hModule
            OUTPUT      =   'Executable Path: ' sExePath
            Args(xListener)                                                         :F(END)
            &STLIMIT    =   EQ(xDebug, FALSE) -1                                    :F(debuggo)
*---------- ----------- --- ------------------------------------------------------- --------------------
START       $'  '       =   SPAN(' ' tab cr lf)
            $' '        =   FENCE($'  ' | epsilon)
            qQuery      =   POS(0) $ xQT . *assign(.iQT, 0) . *assign(.xQT, TABLE()) *qAlts RPOS(0)
            qAlts       =   *qAlt ARBNO(*qOR *qAlt)
            qOR         =   $'  ' 'OR' $'  '
            qAlt        =   ('"' BREAK('"') '"') . qxAlt . *assign(.iQT, iQT + 1) . *assign(.xQT[iQT], qxAlt)
*========== =========== === =================================================== ====================
            SetupWait()                                                         :F(LEnd)
            SetupCancel()                                                       :F(LEnd)
L05         SQL_Connect(xServer, xDatabase, xUser, xPassword, xListener, xFailOver) :F(SQLFail)
            SQL_SetAutoCommitOff()                                              :F(SQLFail)
            hstmt       =   SQL_AllocStmt()                                     :F(SQLFail)
            xCwd        =   GetCurrentDirectory()
            curl        =   curl_easy_init()                                    :F(LErr)
*           EQ(cc = curl_easy_setopt(curl, CURLOPT_VERBOSE, TRUE))              :F(LErr)
            EQ(cc = curl_easy_setopt(curl, CURLOPT_SSL_VERIFYPEER, FALSE))      :F(LErr)
            EQ(cc = curl_easy_setopt(curl, CURLOPT_USERAGENT, userAgent))       :F(LErr)
            EQ(cc = curl_easy_setopt(curl, CURLOPT_REFERER, urlReferer))        :F(LErr)
            EQ(cc = curl_easy_setopt(curl, CURLOPT_COOKIEFILE, cookies))        :F(LErr)
            EQ(cc = curl_easy_setopt(curl, CURLOPT_COOKIEJAR, cookies))         :F(LErr)
            oneMin      =   1 * 60 * 1000
            periodSecs  =   IDENT(periodSecs) 900
            prevTime    =   DTDecode(Datetime())
            ReadCities()                                                        :F(error)
            ReadSchema('Yelp')                                                  :F(error)
            ReadConfig(xListener)                                               :F(error)
*---------- Polling ... -------------------------------------------------------
            iPoll       =   xIT[0]['Poll']
L10         iPoll       =   EQ(IsCancelled(), FALSE) iPoll + 1                  :F(LEnd)
*---------- FOR every city ... ------------------------------------------------
            iCity       =   xIT[0]['City']
L20         iCity       =   LT(iCity, xMaxCities) iCity + 1                     :F(L90)
            city        =   DIFFER(xCT[iCity]) xCT[iCity]                       :F(L20)
            xWhere      =   name(city)
            ReadConfig(xListener)                                               :F(error)
*---------- FOR all topics ... ------------------------------------------------
            iTopic      =   xIT[0]['Topic']
L30         iTopic      =   LT(iTopic, xMaxEntity) iTopic + 1                   :F(L80)
            xT          =   DIFFER(xIT[iTopic]) xIT[iTopic]                     :F(L30)
            xE          =   xT['Name']
            xQ          =   xT['Query']
            xQ          ?   *qQuery                                             :F(error)
*---------- FOR every search alternative ... ----------------------------------
            iAlt        =   xT['Alt']
L40         iAlt        =   iAlt + 1
            qxQuery     =   DIFFER(xQT[iAlt]) xQT[iAlt]                         :F(L70)
*           Get result ...
            ypxExpr     =   EVAL(ypExpr)
            url         =   ypUrl '?' ypxExpr
L43         iTry        =   0
L44         iTry        =   LT(iTry, 10) iTry + 1                               :F(LErr)
            EQ(IsCancelled(), FALSE)                                            :F(L90)
            Wait(GT(iTry, 1) oneMin)
            currTime    =   DTDecode(Datetime())
            iSecs       =   DTDiff(currTime, prevTime)
            iWaitSecs   =   periodSecs - iSecs
            OUTPUT      =   GE(xVerbose, 3) LT(iWaitSecs) 'Slipped ' -iWaitSecs ' seconds.'
            Wait(GT(iWaitSecs) iWaitSecs * 1000)
            prevTime    =   DTDecode(Datetime())
            OUTPUT      =   GE(xVerbose, 5) iTopic ',' DTEncode(prevTime) ' GET ' ypUrl '?' ypxExpr
            EQ(cc = curl_easy_setopt(curl, CURLOPT_HTTPGET, TRUE))              :F(LErr)
            EQ(cc = curl_easy_setopt_int(curl, CURLOPT_TIMEOUT, 120))           :F(LErr)
            EQ(cc = curl_easy_setopt(curl, CURLOPT_URL, url))                   :F(LErr)
            EQ(cc = curl_easy_perform(curl))                                    :F(L44)
            json        =   curl_easy_getdata()
            json        ?   POS(0) '<!DOCTYPE ' ('HTML' | 'html')               :S(L40E)
            Write(xListener '.json', json)
            LineMap(json, .t8Map)
            json        ?   *jpPretty = jpxP                                    :F(L40X)
*           Process result ...
L45         Write(xListener '.json', json)
*           Write(xListener '-' (iWritten = iWritten + 1) '.json', json)
            LineMap(json, .t8Map)
            json        ?   *jRecognizer                                        :S(L40S)F(L40F)
L40S        iIter       =   iIter + 1
            r           =   Pop()
            tK          =   TABLE()
            tK[0]       =   1
            tK[1]       =   'Yelp'
            tK['$Yelp'] =   '@id$'
            BATCH       =
            Schema(.BATCH, r, 'Yelp')
            DIFFER(BATCH)                                                       :F(L40S1)
            SQL_A_ExecDirect(hstmt, BATCH)                                      :F(SQLFail)
            SQL_EndTranCommit()                                                 :F(SQLFail)
L40S1       BATCH       =
            BATCH       =   BATCH 'DECLARE @id$ int' nl
            Save(.BATCH, r, 'Yelp', 0)
            hBatch      =   SQL_AllocStmt()                                     :F(SQLFail)
            SQL_W_ExecDirect(hBatch, utf8_to_wstr(BATCH))                       :F(SQLFail)
            SQL_EndTranCommit()                                                 :F(SQLFail)
            SQL_FreeStmt(hBatch)                                                :F(SQLFail)
            xT['Alt']   =   iAlt
            TERMINAL    =   EQ(REMDR(iIter, 5), 0) 'INSERT ... ' iIter          :(L40)
L40F        TERMINAL    =   'failure'                                           :(END)
L40X        TERMINAL    =   'terminal failure'                                  :(END)
L40E        TERMINAL    =   'HTML RESPONSE !!!'
            TERMINAL    =   json
*---------- END FOR every search alternative ----------------------------------
L70         xT['Alt']   =
            xIT[0]['Topic'] = iTopic
            IniWrite(xListener '.ini', xIT)                                     :(L30)
*---------- END FOR all topics ------------------------------------------------
L80         xIT[0]['Topic'] = 0
            xIT[0]['City'] = iCity
            IniWrite(xListener '.ini', xIT)                                     :(L20)
*---------- END FOR every city ------------------------------------------------
L90         xIT[0]['City'] = 0
            xIT[0]['Poll'] = iPoll
            IniWrite(xListener '.ini', xIT)                                     :(L10)
*---------- ----------- --- ---------------------------------------------------
SQLFail     OUTPUT      =   'SQL Failure: ' SQL_GetLastError()
            IniWrite(xListener '.ini', xIT)
            iSQLFail    =   LT(iSQLFail, 10) iSQLFail + 1                       :F(LEnd)
            (SQL_FreeStmt(hstmt), OUTPUT = 'FreeStmt: ' SQL_GetLastError())
            (SQL_Disconnect(), OUTPUT = 'Disconnect: ' SQL_GetLastError())
            curl_easy_cleanup(curl)
            Wait(oneMin)                                                        :(L05)
*---------- ----------- --- ---------------------------------------------------
LErr        curl_easy_error_info(curl, cc)                                      :(LEnd)
*---------- ----------- --- ---------------------------------------------------
LEnd        IniWrite(xListener '.ini', xIT)
            (SQL_FreeStmt(hstmt), OUTPUT = 'FreeStmt: ' SQL_GetLastError())
            (SQL_Disconnect(), OUTPUT = 'Disconnect: ' SQL_GetLastError())
            curl_easy_cleanup(curl)                                             :(END)
*========== =========== === ===================================================
*-INCLUDE 'debug.sno'
END
